"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestLiveShareHost = void 0;
const interfaces_1 = require("./interfaces");
/**
 * Live Share Host implementation used for local testing.
 */
class TestLiveShareHost {
    /**
     * Creates an new live share host for local testing.
     * @param getLocalTestContainerId Optional. Function to customize reading the test container ID. The default implementation reads the ID from the browsers # URL.
     * @param setLocalTestContainerId Optional. Function to customize saving the test container ID. The default implementation appends the ID to the browsers # URL.
     * @returns
     */
    static create(getLocalTestContainerId, setLocalTestContainerId) {
        return new TestLiveShareHost(getLocalTestContainerId, setLocalTestContainerId);
    }
    /**
     * @hidden
     */
    constructor(_getLocalTestContainerId, _setLocalTestContainerId) {
        this._getLocalTestContainerId = _getLocalTestContainerId;
        this._setLocalTestContainerId = _setLocalTestContainerId;
        this.roleCache = new Map();
        this.defaultRemoteRoles = [
            interfaces_1.UserMeetingRole.organizer,
            interfaces_1.UserMeetingRole.presenter,
            interfaces_1.UserMeetingRole.attendee,
        ];
        this.defaultLocalRoles = [
            interfaces_1.UserMeetingRole.organizer,
            interfaces_1.UserMeetingRole.presenter,
            interfaces_1.UserMeetingRole.attendee,
        ];
    }
    getFluidTenantInfo() {
        TestLiveShareHost.ensureWarned();
        return Promise.resolve({
            tenantId: "local",
            serviceEndpoint: "http://localhost:7070",
        });
    }
    getFluidToken(containerId) {
        return Promise.resolve(TestLiveShareHost.LOCAL_MODE_TEST_TOKEN);
    }
    getFluidContainerId() {
        const containerId = this.getLocalTestContainerId();
        return Promise.resolve({
            containerState: containerId
                ? interfaces_1.ContainerState.alreadyExists
                : interfaces_1.ContainerState.notFound,
            shouldCreate: !containerId,
            containerId: containerId,
            retryAfter: 0,
        });
    }
    setFluidContainerId(containerId) {
        this.setLocalTestContainerId(containerId);
        return Promise.resolve({
            containerState: interfaces_1.ContainerState.added,
            containerId: containerId,
            shouldCreate: false,
            retryAfter: 0,
        });
    }
    getNtpTime() {
        const now = new Date();
        return Promise.resolve({
            ntpTime: now.toUTCString(),
            ntpTimeInUTC: now.getTime(),
        });
    }
    registerClientId(clientId) {
        if (this.roleCache.has(clientId)) {
            throw new Error("Already registered clientId");
        }
        this.addClient(clientId, this.defaultLocalRoles);
        return Promise.resolve(this.defaultLocalRoles);
    }
    // not part of LiveShareHost interface, but can be used to override roles for testing
    addClient(clientId, roles) {
        this.roleCache.set(clientId, roles);
        return this;
    }
    getClientInfo(clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            const info = {
                userId: clientId,
                roles: yield this.getClientRoles(clientId),
                displayName: clientId.substring(0, 4),
            };
            return Promise.resolve(info);
        });
    }
    getClientRoles(clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!clientId) {
                throw new Error(`TestLiveShareHost: called getClientRoles() without a clientId`);
            }
            let roles;
            if (this.roleCache.has(clientId)) {
                roles = this.roleCache.get(clientId);
            }
            else {
                roles = this.defaultRemoteRoles;
            }
            return Promise.resolve(roles);
        });
    }
    getLocalTestContainerId() {
        if (this._getLocalTestContainerId) {
            return this._getLocalTestContainerId();
        }
        else if (window.location.hash) {
            return window.location.hash.substring(1);
        }
        else {
            return undefined;
        }
    }
    setLocalTestContainerId(containerId) {
        if (this._setLocalTestContainerId) {
            this._setLocalTestContainerId(containerId);
        }
        else {
            window.location.hash = containerId;
        }
    }
    static ensureWarned() {
        if (!TestLiveShareHost._warned) {
            console.warn(`TestLiveShareHost is being used. This should only be used for local testing purposes.`);
            TestLiveShareHost._warned = true;
        }
    }
}
TestLiveShareHost.LOCAL_MODE_TEST_TOKEN = `test-token`;
TestLiveShareHost._warned = false;
exports.TestLiveShareHost = TestLiveShareHost;
//# sourceMappingURL=TestLiveShareHost.js.map