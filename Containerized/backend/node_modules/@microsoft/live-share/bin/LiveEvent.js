"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveEvent = exports.LiveEventEvents = void 0;
const aqueduct_1 = require("@fluidframework/aqueduct");
const interfaces_1 = require("./interfaces");
const LiveEventScope_1 = require("./LiveEventScope");
const LiveEventTarget_1 = require("./LiveEventTarget");
const DynamicObjectRegistry_1 = require("./DynamicObjectRegistry");
const LiveDataObject_1 = require("./LiveDataObject");
const internals_1 = require("./internals");
/**
 * Events supported by `LiveEvent` object.
 */
var LiveEventEvents;
(function (LiveEventEvents) {
    /**
     * An event has been sent or received.
     */
    LiveEventEvents["received"] = "received";
})(LiveEventEvents = exports.LiveEventEvents || (exports.LiveEventEvents = {}));
/**
 * Live fluid object that broadcasts an event to other clients and a set of static event
 * related helpers.
 *
 * #### remarks
 * Applications should call `on('received', (evt, local) => {})` to listen for local events sent
 * and remote events received. Events aren't guaranteed to be delivered so you should limit their
 * use to sending events you're ok with potentially being missed. Reactions are a good use case for
 * `LiveEvents`. Use something like the `LiveState` class when syncing state.
 * @template TEvent Type of event to broadcast.
 */
class LiveEvent extends LiveDataObject_1.LiveDataObject {
    /**
     * Initialize the object to begin sending/receiving events through this DDS.
     *
     * @remarks
     * You should register `received` event listeners before calling this function to ensure no incoming events are missed.
     * `received` events will not be emitted until after this function is called.
     *
     * @param allowedRoles Optional. List of roles allowed to send events.
     *
     * @returns a void promise that resolves once complete.
     *
     * @throws error when `.initialize()` has already been called for this class instance.
     */
    initialize(allowedRoles) {
        if (this.initializeState !== interfaces_1.LiveDataObjectInitializeState.needed) {
            throw new Error(`LiveEvent already started.`);
        }
        this.initializeState = interfaces_1.LiveDataObjectInitializeState.pending;
        this._allowedRoles = allowedRoles !== null && allowedRoles !== void 0 ? allowedRoles : [];
        const scope = new LiveEventScope_1.LiveEventScope(this.runtime, this.liveRuntime, allowedRoles);
        this._eventTarget = new LiveEventTarget_1.LiveEventTarget(scope, "event", (evt, local) => {
            this.emit(LiveEventEvents.received, (0, internals_1.cloneValue)(evt.data), local, evt.clientId, evt.timestamp);
        });
        this.initializeState = interfaces_1.LiveDataObjectInitializeState.succeeded;
        return Promise.resolve();
    }
    /**
     * Broadcasts an event to all other clients.
     *
     * @remarks
     * The event will be queued for delivery if the client isn't currently connected.
     *
     * @param evt Event to send. If omitted, an event will still be sent but it won't include any custom event data.
     *
     * @returns A promise with the full event object that was sent, including the timestamp of when the event was sent and the clientId if known.
     * The clientId will be `undefined` if the client is disconnected at time of delivery.
     *
     * @throws error if initialization has not yet succeeded.
     * @throws error if the local user does not have the required roles defined through the `allowedRoles` prop in `.initialize()`.
     */
    send(evt) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.initializeState !== interfaces_1.LiveDataObjectInitializeState.succeeded) {
                throw new Error(`LiveEvent: not initialized prior to calling \`.send()\`. \`initializeState\` is \`${this.initializeState}\` but should be \`succeeded\`.\nTo fix this error, ensure \`.initialize()\` has resolved before calling this function.`);
            }
            if (!this._eventTarget) {
                throw new Error(`LiveEvent: this._eventTarget is undefined, implying there was an error during initialization that should not occur. Please report this issue at https://aka.ms/teamsliveshare/issue.`);
            }
            return yield this._eventTarget.sendEvent(evt);
        });
    }
    /**
     * Returns true if a received event is newer then the current event.
     *
     * @remarks
     * Used when building new Live objects to process state change events. The `isNewer()`
     * method implements an algorithm that deals with conflicting events that have the same timestamp
     * and older events that should have debounced the current event.
     *
     * - When the received event has the same timestamp as the current event, each events clientId
     *   will be used as a tie breaker. The clientId containing the lower sort order wins any ties.
     * - Older events are generally ignored unless a debounce period is specified. An older event
     *   that should have debounced the current event will be considered newer.
     *
     * The algorithm employed by isNewer() helps ensure that all clients will eventually reach a
     * consistent state with one other.
     * @param current Current event to compare received event against.
     * @param received Received event.
     * @param debouncePeriod Optional. Time in milliseconds to ignore any new events for. Defaults to 0 ms.
     * @returns True if the received event is newer then the current event and should replace the current one.
     */
    static isNewer(current, received, debouncePeriod = 0) {
        if (current) {
            if (current.timestamp == received.timestamp) {
                // In a case where both clientId's are blank that's the local client in a disconnected state
                const cmp = (current.clientId || "").localeCompare(received.clientId || "");
                if (cmp <= 0) {
                    // - cmp == 0 is same user. We use to identify events for same user as newer but
                    //   that was causing us to fire duplicate state & presence change events. The better
                    //   approach is to update the timestamp provider to never return the same timestamp
                    //   twice.  (Comparison was changed on 8/2/2022)
                    // - cmp > 0 is a tie breaker so we'll take that event as well (comparing 'a' with 'c'
                    //   will result in a negative value).
                    return false;
                }
            }
            else if (current.timestamp > received.timestamp) {
                // Did we receive an older event that should have caused us to debounce the current one?
                const delta = current.timestamp - received.timestamp;
                if (delta > debouncePeriod) {
                    return false;
                }
            }
            else {
                // Is the new event within the debounce period?
                const delta = received.timestamp - current.timestamp;
                if (delta < debouncePeriod) {
                    return false;
                }
            }
        }
        return true;
    }
}
/**
 * The objects fluid type/name.
 */
LiveEvent.TypeName = `@microsoft/live-share:LiveEvent`;
/**
 * The objects fluid type factory.
 */
LiveEvent.factory = new aqueduct_1.DataObjectFactory(LiveEvent.TypeName, LiveEvent, [], {});
exports.LiveEvent = LiveEvent;
/**
 * Register `LiveEvent` as an available `LoadableObjectClass` for use in packages that support dynamic object loading, such as `@microsoft/live-share-turbo`.
 */
DynamicObjectRegistry_1.DynamicObjectRegistry.registerObjectClass(LiveEvent, LiveEvent.TypeName);
//# sourceMappingURL=LiveEvent.js.map