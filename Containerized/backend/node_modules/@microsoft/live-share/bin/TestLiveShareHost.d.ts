/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
import { ILiveShareHost, IFluidTenantInfo, IFluidContainerInfo, INtpTimeInfo, UserMeetingRole, IClientInfo } from "./interfaces";
/**
 * Live Share Host implementation used for local testing.
 */
export declare class TestLiveShareHost implements ILiveShareHost {
    private _getLocalTestContainerId?;
    private _setLocalTestContainerId?;
    static readonly LOCAL_MODE_TEST_TOKEN = "test-token";
    private roleCache;
    /**
     * Creates an new live share host for local testing.
     * @param getLocalTestContainerId Optional. Function to customize reading the test container ID. The default implementation reads the ID from the browsers # URL.
     * @param setLocalTestContainerId Optional. Function to customize saving the test container ID. The default implementation appends the ID to the browsers # URL.
     * @returns
     */
    static create(getLocalTestContainerId?: () => string | undefined, setLocalTestContainerId?: (containerId: string) => void): ILiveShareHost;
    /**
     * @hidden
     */
    private constructor();
    defaultRemoteRoles: UserMeetingRole[];
    defaultLocalRoles: UserMeetingRole[];
    getFluidTenantInfo(): Promise<IFluidTenantInfo>;
    getFluidToken(containerId?: string): Promise<string>;
    getFluidContainerId(): Promise<IFluidContainerInfo>;
    setFluidContainerId(containerId: string): Promise<IFluidContainerInfo>;
    getNtpTime(): Promise<INtpTimeInfo>;
    registerClientId(clientId: string): Promise<UserMeetingRole[]>;
    addClient(clientId: string, roles: UserMeetingRole[]): this;
    getClientInfo(clientId: string): Promise<IClientInfo>;
    getClientRoles(clientId: string): Promise<UserMeetingRole[]>;
    private getLocalTestContainerId;
    private setLocalTestContainerId;
    private static _warned;
    private static ensureWarned;
}
//# sourceMappingURL=TestLiveShareHost.d.ts.map