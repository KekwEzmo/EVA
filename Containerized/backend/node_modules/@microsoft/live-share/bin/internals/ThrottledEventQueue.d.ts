import { ILiveEvent } from "../interfaces";
import { ContainerSynchronizer } from "./ContainerSynchronizer";
/**
 * @hidden
 * Queue for grouping multiple signal events together.
 *
 * @remarks
 * See {@link ContainerSynchronizer} for usage.
 */
export declare class ThrottledEventQueue {
    private _containerSynchronizer;
    private _events;
    private _throttleIntervalMilli;
    private _deferred;
    private _hTimer;
    /**
     * @hidden
     * Queue for grouping multiple signal events together.
     *
     * @param synchronizer container synchronizer to send the events through
     * @param throttleIntervalMilli interval for throttling
     */
    constructor(synchronizer: ContainerSynchronizer, throttleIntervalMilli?: number);
    /**
     * Send an event with a queue.
     * This will schedule a new batch to be sent if one is not already scheduled.
     */
    sendWithQueue<TState = any>(objectId: string, event: Omit<ILiveEvent<any>, "name" | "clientId">): Promise<ILiveEvent<TState>>;
}
//# sourceMappingURL=ThrottledEventQueue.d.ts.map