"use strict";
/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveShareTokenProvider = void 0;
/**
 * @hidden
 * Token Provider implementation for connecting to a Live Share Host
 */
class LiveShareTokenProvider {
    constructor(_host) {
        this._host = _host;
    }
    fetchOrdererToken(tenantId, documentId, refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenResponse = yield this.fetchFluidToken(tenantId, documentId, refresh);
            return tokenResponse;
        });
    }
    fetchStorageToken(tenantId, documentId, refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenResponse = yield this.fetchFluidToken(tenantId, documentId, refresh);
            return tokenResponse;
        });
    }
    fetchFluidToken(tenantId, documentId, refresh) {
        return __awaiter(this, void 0, void 0, function* () {
            let fromCache;
            if (!this._frsToken ||
                refresh ||
                this._tenantId !== tenantId ||
                this._documentId !== documentId) {
                this._frsToken = yield this._host.getFluidToken(documentId);
                fromCache = false;
            }
            else {
                fromCache = true;
            }
            this._tenantId = tenantId;
            if (documentId) {
                this._documentId = documentId;
            }
            return {
                jwt: this._frsToken,
                fromCache,
            };
        });
    }
}
exports.LiveShareTokenProvider = LiveShareTokenProvider;
//# sourceMappingURL=LiveShareTokenProvider.js.map