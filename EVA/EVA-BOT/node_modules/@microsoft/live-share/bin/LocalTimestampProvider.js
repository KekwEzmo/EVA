"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalTimestampProvider = void 0;
/**
 * Implements a local timestamp provider for testing purposes.
 *
 * @remarks
 * This implementation does not derive from `TimestampProvider` class as it doesn't need to be started.
 */
class LocalTimestampProvider {
    constructor(noWarn = false) {
        this._lastTimeSent = 0;
        if (noWarn) {
            LocalTimestampProvider._warned = true;
        }
    }
    getTimestamp() {
        if (!LocalTimestampProvider._warned) {
            console.warn(`LiveEvent is using a LocalTimestampProvider which could cause issues when used across multiple clients.`);
            LocalTimestampProvider._warned = true;
        }
        // Return timestamp and save last
        // - We never want to generate the same timestamp twice and we always want a greater
        //   timestamp then what we previously sent.
        return (this._lastTimeSent = Math.max(new Date().getTime(), this._lastTimeSent + 1));
    }
    getMaxTimestampError() {
        return 0;
    }
}
LocalTimestampProvider._warned = false;
exports.LocalTimestampProvider = LocalTimestampProvider;
//# sourceMappingURL=LocalTimestampProvider.js.map