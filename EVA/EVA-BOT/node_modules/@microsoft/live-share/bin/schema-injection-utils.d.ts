import { IFluidLoadable } from "@fluidframework/core-interfaces";
import { LiveShareRuntime } from "./LiveShareRuntime";
import { ContainerSchema, LoadableObjectClass } from "fluid-framework";
/**
 * Inject Live Share dependencies into your Fluid container schema.
 * This should only be done once, right before connecting to a container.
 * @remarks
 * Users should not use this method if you are connecting to a container using `LiveShareClient`.
 * This is intended to be used when you are using another Fluid client, such as `AzureClient`.
 *
 * @param schema Fluid ContainerSchema you would like to inject the runtime into
 * @param liveRuntime LiveShareRuntime instance
 * @returns ContainerSchema with injected dependencies
 */
export declare function getLiveShareContainerSchemaProxy(schema: ContainerSchema, liveRuntime: LiveShareRuntime): ContainerSchema;
/**
 * @hidden
 * Inject Live Share dependencies to relevant `LiveDataObject` derived classes.
 * Regular `DataObject` classes are not proxied.
 */
export declare function getLiveDataObjectClassProxy<TClass extends IFluidLoadable>(ObjectClass: LoadableObjectClass<any>, liveRuntime: LiveShareRuntime, existingProxyRegistries?: Map<string, LoadableObjectClass<any>>): LoadableObjectClass<TClass>;
//# sourceMappingURL=schema-injection-utils.d.ts.map