/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
import { INtpTimeInfo, ITimestampProvider } from "./interfaces";
/**
 * Default `ITimestampProvider` implementation.
 *
 */
export declare abstract class TimestampProvider implements ITimestampProvider {
    private _serverTime?;
    private _syncTimer?;
    private _retries;
    private _lastTimeSent;
    /**
     * Returns true if the provider has been started.
     */
    get isRunning(): boolean;
    /**
     * Returns the current server time as a UTC tick.
     */
    getTimestamp(): number;
    /**
     * Returns the maximum amount of error, in milliseconds.
     */
    getMaxTimestampError(): number;
    /**
     * Starts the provider.
     */
    start(): Promise<void>;
    /**
     * Stops the provider if its running.
     */
    stop(): void;
    /**
     * Returns the derived classes computed NTP time.
     */
    protected abstract getNtpTime(): Promise<INtpTimeInfo>;
    /**
     * Called in a loop to improve the accuracy of the clients timestamp offset.
     *
     * The function will periodically call itself until we go 5 times without an improvement
     * to the calculated timestamp offset.
     */
    private improveAccuracy;
    /**
     * Fetches the current timestamp from central timestamp service and computes the local offset.
     * @returns Computed timestamp offset.
     */
    private getSessionTimeOffset;
}
//# sourceMappingURL=TimestampProvider.d.ts.map