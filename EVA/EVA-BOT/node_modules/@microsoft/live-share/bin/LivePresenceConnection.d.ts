import { LivePresenceReceivedEventData, PresenceState } from "./LivePresenceUser";
import { LiveShareRuntime } from "./LiveShareRuntime";
import { TimeInterval } from "./TimeInterval";
/**
 * A connection that presence is being tracked for.
 */
export declare class LivePresenceConnection<TData = object> {
    private _evt;
    private _isLocalConnection;
    private _expirationPeriod;
    private _liveRuntime;
    /**
     * @hidden
     */
    constructor(_evt: LivePresenceReceivedEventData<TData>, _isLocalConnection: boolean, _expirationPeriod: TimeInterval, _liveRuntime: LiveShareRuntime);
    /**
     * If `true` the connection is a local connection.
     */
    get isLocalConnection(): boolean;
    /**
     * ID of the client.
     */
    get clientId(): string;
    /**
     * Connections current state.
     *
     * @remarks
     * This is automatically set to `PresenceState.offline` if the users client hasn't sent updates
     * for a period of time.
     */
    get state(): PresenceState;
    /**
     * Optional data shared by the user.
     */
    get data(): TData | undefined;
    /**
     * @hidden
     */
    updateConnection(evt: LivePresenceReceivedEventData<TData>): void;
    /**
     * @hidden
     */
    set expirationPeriod(value: TimeInterval);
    private hasExpired;
}
//# sourceMappingURL=LivePresenceConnection.d.ts.map