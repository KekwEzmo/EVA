"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveTelemetryLogger = void 0;
/**
 * Wraps the configured logger for the runtime and ensures that certain mandatory properties
 * are included on outgoing telemetry events.
 */
class LiveTelemetryLogger {
    /**
     * Creates a new `LiveTelemetryLogger` instance.
     * @param runtime Containers runtime instance.
     */
    constructor(runtime, _liveRuntime) {
        this._liveRuntime = _liveRuntime;
        this._runtime = runtime;
    }
    /**
     * Sends a generic telemetry event.
     * @param eventName Name of the event to send.
     * @param error Optional. Error object to send with event.
     * @param additionalProperties Optional. Additional properties to include with event.
     */
    sendTelemetryEvent(eventName, error, additionalProperties) {
        if (this._runtime.logger) {
            const evt = this.createTelemetryEvent(eventName, additionalProperties);
            this._runtime.logger.sendTelemetryEvent(evt, error);
        }
    }
    /**
     * Sends an error event.
     * @param eventName Name of the event to send.
     * @param error Optional. Error object to send with event.
     * @param additionalProperties Optional. Additional properties to include with event.
     */
    sendErrorEvent(eventName, error, additionalProperties) {
        if (this._runtime.logger) {
            const evt = this.createTelemetryEvent(eventName, additionalProperties);
            this._runtime.logger.sendErrorEvent(evt, error);
        }
    }
    /**
     * Sends a performance telemetry event.
     * @param eventName Name of the event to send.
     * @param duration The duration of the event in milliseconds.
     * @param error Optional. Error object to send with event.
     * @param additionalProperties Optional. Additional properties to include with event.
     */
    sendPerformanceEvent(eventName, duration, error, additionalProperties) {
        if (this._runtime.logger) {
            const evt = Object.assign({ duration: duration }, this.createTelemetryEvent(eventName, additionalProperties));
            this._runtime.logger.sendPerformanceEvent(evt, error);
        }
    }
    createTelemetryEvent(eventName, additionalProperties) {
        const now = this._liveRuntime.getTimestamp();
        return Object.assign({ eventName: eventName, clientId: this._runtime.clientId, correlationId: LiveTelemetryLogger.formatCorrelationId(this._runtime.clientId, now), timestamp: now }, additionalProperties);
    }
    static formatCorrelationId(clientId, timestamp) {
        return `${clientId}:${timestamp}`;
    }
}
exports.LiveTelemetryLogger = LiveTelemetryLogger;
//# sourceMappingURL=LiveTelemetryLogger.js.map