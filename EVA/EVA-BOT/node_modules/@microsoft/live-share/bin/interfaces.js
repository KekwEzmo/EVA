"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveDataObjectInitializeState = exports.ContainerState = exports.UserMeetingRole = void 0;
/**
 * Allowed roles during a meeting.
 */
var UserMeetingRole;
(function (UserMeetingRole) {
    /**
     * The user is an external guest user.
     */
    UserMeetingRole["guest"] = "Guest";
    /**
     * The user is a standard meeting attendee.
     */
    UserMeetingRole["attendee"] = "Attendee";
    /**
     * The user has presenter privileges for the meeting.
     */
    UserMeetingRole["presenter"] = "Presenter";
    /**
     * The user is a meeting organizer.
     */
    UserMeetingRole["organizer"] = "Organizer";
})(UserMeetingRole = exports.UserMeetingRole || (exports.UserMeetingRole = {}));
/**
 * State of the current Live Share sessions backing fluid container.
 */
var ContainerState;
(function (ContainerState) {
    /**
     * The call to `LiveShareHost.setContainerId()` successfully created the container mapping
     * for the current Live Share session.
     */
    ContainerState["added"] = "Added";
    /**
     * A container mapping for the current Live Share Session already exists and should be used
     * when joining the sessions Fluid container.
     */
    ContainerState["alreadyExists"] = "AlreadyExists";
    /**
     * The call to `LiveShareHost.setContainerId()` failed to create the container mapping due to
     * another client having already set the container ID for the current Live Share session.
     */
    ContainerState["conflict"] = "Conflict";
    /**
     * A container mapping for the current Live Share session doesn't exist yet.
     */
    ContainerState["notFound"] = "NotFound";
})(ContainerState = exports.ContainerState || (exports.ContainerState = {}));
/**
 * The initialization state for the `LiveDataObject` class.
 */
var LiveDataObjectInitializeState;
(function (LiveDataObjectInitializeState) {
    /**
     * The default state when `.initialize()` has not been called and/or a previous call to `.initialize()` failed
     */
    LiveDataObjectInitializeState["needed"] = "needed";
    /**
     * The state when `.initialize()` has been called but has not yet succeeded
     */
    LiveDataObjectInitializeState["pending"] = "pending";
    /**
     * The state when `.initialize()` has succeeded
     */
    LiveDataObjectInitializeState["succeeded"] = "succeeded";
    /**
     * The state when `.initialize()` has a fatal error and `.initialize()` is never expected to succeed
     */
    LiveDataObjectInitializeState["fatalError"] = "fatalError";
})(LiveDataObjectInitializeState = exports.LiveDataObjectInitializeState || (exports.LiveDataObjectInitializeState = {}));
//# sourceMappingURL=interfaces.js.map