import { IClientInfo, ILiveShareHost, IRoleVerifier, ITimestampProvider, UserMeetingRole, IContainerRuntimeSignaler } from "./interfaces";
import { LiveObjectManager } from "./internals";
import { IAzureAudience } from "@fluidframework/azure-client";
import { ILiveShareClientOptions } from "./LiveShareClient";
/**
 * Runtime for LiveDataObject, which is used to do things like validate roles, get a timestamp
 */
export declare class LiveShareRuntime {
    private _started;
    private _host;
    private _timestampProvider;
    private _roleVerifier;
    private _canSendBackgroundUpdates;
    protected _containerRuntime?: IContainerRuntimeSignaler;
    private _objectManager;
    private _audience?;
    /**
     * Runtime for `LiveDataObject`.
     *
     * @param host Host for the current Live Share session.
     * @param options Optional. Options used for initializing `LiveShareClient`.
     * @param decorate choose whether or not to automatically decorate host with `BackwardsCompatibilityHostDecorator` and `LiveShareHostDecorator`
     */
    constructor(host: ILiveShareHost, options?: ILiveShareClientOptions, decorate?: boolean);
    /**
     * `LiveObjectSynchronizerManager` instance
     */
    get objectManager(): LiveObjectManager;
    /**
     * `ITimestampProvider` instance
     */
    get timestampProvider(): ITimestampProvider;
    /**
     * `ILiveShareHost` instance
     */
    get host(): ILiveShareHost;
    /**
     * Setting for whether `LiveDataObject` instances using `LiveObjectSynchronizer` can send background updates.
     * Default value is `true`.
     *
     * @remarks
     * This is useful for scenarios where there are a large number of participants in a session, since service performance degrades as more socket connections are opened.
     * Intended for use when a small number of users are intended to be "in control", such as the `LiveFollowMode` class's `startPresenting()` feature.
     * There should always be at least one user in the session that has `canSendBackgroundUpdates` set to true.
     * Set to true when the user is eligible to send background updates (e.g., "in control"), or false when that user is not in control.
     * This setting will not prevent the local user from explicitly changing the state of objects using `LiveObjectSynchronizer`, such as `.set()` in `LiveState`.
     * Impacts background updates of `LiveState`, `LivePresence`, `LiveTimer`, and `LiveFollowMode`.
     */
    get canSendBackgroundUpdates(): boolean;
    set canSendBackgroundUpdates(value: boolean);
    /**
     * Returns the current timestamp as the number of milliseconds sine the Unix Epoch.
     */
    getTimestamp(): number;
    /**
     * Verifies that a client has one of the specified roles.
     * @param clientId Client ID to inspect.
     * @param allowedRoles User roles that are allowed.
     * @returns True if the client has one of the specified roles.
     */
    verifyRolesAllowed(clientId: string, allowedRoles: UserMeetingRole[]): Promise<boolean>;
    /**
     * Get the client info for a given clientId
     * @param clientId Fluid clientId we are requesting user info for
     * @returns IClientInfo object if the user is known, otherwise it will return undefined
     */
    getClientInfo(clientId: string): Promise<IClientInfo | undefined>;
    /**
     * @hidden
     * Set the timestamp provider for the runtime
     * @param timestampProvider timestamp provider to set
     */
    setTimestampProvider(timestampProvider: ITimestampProvider): void;
    /**
     * @hidden
     * Set the role verifier for the runtime
     * @param roleVerifier role verifier to set
     */
    setRoleVerifier(roleVerifier: IRoleVerifier): void;
    /**
     * Set the host for the runtime
     * @param host ILiveShareHost to change
     * @param decorate choose whether or not to automatically decorate host with `BackwardsCompatibilityHostDecorator` and `LiveShareHostDecorator`
     */
    setHost(host: ILiveShareHost, decorate?: boolean): void;
    /**
     * Set the audience for the runtime
     * @param audience `IAzureAudience` returned by `AzureClient`
     */
    setAudience(audience: IAzureAudience): void;
    /**
     * Start the timestamp provider
     */
    start(): Promise<void>;
    /**
     * Stop the timestamp provider
     */
    stop(): void;
    /**
     * @hidden
     * Do not use this API unless you know what you are doing.
     * Using it incorrectly could cause object synchronizers to stop working.
     */
    __dangerouslySetContainerRuntime(cRuntime: IContainerRuntimeSignaler): void;
    /**
     * @hidden
     */
    private startObjectSynchronizerManager;
}
//# sourceMappingURL=LiveShareRuntime.d.ts.map