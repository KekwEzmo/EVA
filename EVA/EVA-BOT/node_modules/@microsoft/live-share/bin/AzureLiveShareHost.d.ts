import { AzureMember, IAzureAudience } from "@fluidframework/azure-client";
import { IClientInfo, IFluidContainerInfo, IFluidTenantInfo, ILiveShareHost, INtpTimeInfo, UserMeetingRole } from "./interfaces";
/**
 * @alpha
 * This host enables using Live Share through your own `AzureClient` implementation.
 * This is not intended to be used with `LiveShareClient`.
 * We provide no SLA guarantees on this implementation while it is in alpha.
 *
 * @remarks
 * To use this API, first pass your `ContainerSchema` through the `getLiveShareContainerSchemaProxy` function.
 * This should be done before calling `.getContainer()` or `createContainer()`.
 * Then, call `setAudience()` with the `IAzureAudience` object (in `AzureContainerServices`) returned by the `AzureClient`.
 */
export declare class AzureLiveShareHost implements ILiveShareHost {
    private _shouldWarnLocalTimestamp;
    private _azureAudienceDeferred;
    private hasWarned;
    /**
     * @hidden
     */
    private constructor();
    /**
     * @beta
     * Static constructor for host enables using Live Share through your own `AzureClient` implementation.
     * @param azureAudience the Azure Audience object for your Fluid container
     * @param shouldWarnLocalTimestamp warning for using the local timestamp value for `getNptTime`.
     * @returns new `AzureLiveShareHost` instance
     */
    static create(shouldWarn?: boolean): AzureLiveShareHost;
    /**
     * This function should be called immediately after getting audience from `AzureClient`.
     * @param audience Azure Audience
     */
    setAudience(audience: IAzureAudience): void;
    /**
     * Register doesn't do anything special here, since we are using AzureAudience in this host
     * @see ILiveShareHost.registerClientId
     */
    registerClientId(clientId: string): Promise<UserMeetingRole[]>;
    /**
     * Gets the corresponding `AzureAudience` `IClientInfo` for a given `clientId`
     * @see ILiveShareHost.getClientInfo
     */
    getClientInfo(clientId: string): Promise<IClientInfo | undefined>;
    /**
     * Uses local timestamp by default.
     * @remarks
     * To remove warning, either set shouldWarn in `.create()`, or override this value with a timestamp from a server.
     *
     * @see ILiveShareHost.getNtpTime
     */
    getNtpTime(): Promise<INtpTimeInfo>;
    /**
     * @deprecated
     * @see ILiveShareHost.getClientRoles
     */
    getClientRoles(clientId: string): Promise<UserMeetingRole[] | undefined>;
    /**
     * Will throw not implemented exception. Extend this class and override this function when using with `LiveShareClient`.
     * @see ILiveShareHost.getFluidTenantInfo
     */
    getFluidTenantInfo(): Promise<IFluidTenantInfo>;
    /**
     * Will throw not implemented exception. Extend this class and override this function when using with `LiveShareClient`.
     * @see ILiveShareHost.getFluidToken
     */
    getFluidToken(containerId?: string | undefined): Promise<string>;
    /**
     * Will throw not implemented exception. Extend this class and override this function when using with `LiveShareClient`.
     * @see ILiveShareHost.getFluidContainerId
     */
    getFluidContainerId(): Promise<IFluidContainerInfo>;
    /**
     * Will throw not implemented exception. Extend this class and override this function when using with `LiveShareClient`.
     * @see ILiveShareHost.setFluidContainerId
     */
    setFluidContainerId(containerId: string): Promise<IFluidContainerInfo>;
    /**
     * @hidden
     */
    protected getAudienceMemberInfo(clientId: string): Promise<AzureMember<any> | undefined>;
    /**
     * @hidden
     */
    protected getRolesForAudienceMember(member: AzureMember<any>): UserMeetingRole[];
}
//# sourceMappingURL=AzureLiveShareHost.d.ts.map