/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
import { IClientInfo, ILiveEvent, UserMeetingRole } from "./interfaces";
import { TimeInterval } from "./TimeInterval";
import { LiveShareRuntime } from "./LiveShareRuntime";
import { LivePresenceConnection } from "./LivePresenceConnection";
/**
 * List of possible presence states.
 */
export declare enum PresenceState {
    /**
     * The user is online. Default state while user has at least one client connected.
     */
    online = "online",
    /**
     * The user is away. Applications can set this state based on the users activity.
     */
    away = "away",
    /**
     * The user is offline. Automatically set for users after their client has stopped sending
     * updates for a period of time.
     */
    offline = "offline"
}
/**
 * @hidden
 */
export interface ILivePresenceEvent<TData = object> {
    state: PresenceState;
    data?: TData;
}
/**
 * @hidden
 */
export type LivePresenceReceivedEventData<TData = object> = ILiveEvent<ILivePresenceEvent<TData>>;
/**
 * A user that presence is being tracked for.
 */
export declare class LivePresenceUser<TData = object> {
    private _clientInfo;
    private _evt;
    private _expirationPeriod;
    private _liveRuntime;
    private _lastUpdateTime;
    private _connections;
    private _isLocalUser;
    /**
     * @hidden
     */
    constructor(_clientInfo: IClientInfo, _evt: LivePresenceReceivedEventData<TData>, _expirationPeriod: TimeInterval, _liveRuntime: LiveShareRuntime, _constructedFromLocalEvent: boolean);
    /**
     * If `true` the user is the local user.
     */
    get isLocalUser(): boolean;
    /**
     * ID of the user. Can be undefined when first initialized.
     */
    get userId(): string;
    get displayName(): string | undefined;
    /**
     * Users current state.
     *
     * @remarks
     * This is automatically set to `PresenceState.offline` if the users client hasn't sent updates
     * for a period of time.
     */
    get state(): PresenceState;
    /**
     * Optional data shared by the user. Returns data from connection with most recent event.
     * Client connection specific data is available from each connection.
     */
    get data(): TData | undefined;
    /**
     * Returns the user's meeting roles.
     */
    get roles(): UserMeetingRole[];
    /**
     * Returns the user's connections.
     */
    getConnections(filter?: PresenceState): LivePresenceConnection<TData>[];
    getConnection(clientId: string): LivePresenceConnection<TData> | undefined;
    /**
     * Returns true if the presence object is from the specified client.
     * @param clientId The ID of the client to lookup.
     */
    isFromClient(clientId: string): boolean;
    /**
     * @hidden
     */
    updateReceived(evt: LivePresenceReceivedEventData<TData>, info: IClientInfo, localEvent: boolean): boolean;
    /**
     * @hidden
     */
    set expirationPeriod(value: TimeInterval);
    private hasExpired;
    private updateClients;
}
//# sourceMappingURL=LivePresenceUser.d.ts.map