/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
import { LiveEventSource } from "./LiveEventSource";
import { ILiveEvent } from "./interfaces";
/**
 * Periodically broadcasts an event to listening `LiveEventTarget` instances.
 */
export declare class LiveEventTimer<T extends object = object> {
    private _eventSource;
    private _createEvent;
    private _delay;
    private _isRunning;
    private _timer?;
    /**
     * Creates a new `LiveEventTimer instance.
     * @param eventSource Event source that will be used to emit events.
     * @param createEvent Function used to construct an event to send. This will be called at regular intervals prior to sending an event.
     * @param delay Period to delay for in milliseconds.
     * @param repeat Optional. If true the timer will repeat once `start` is called, otherwise a single event will be sent after the delay. Defaults to false.
     */
    constructor(eventSource: LiveEventSource<T>, createEvent: () => T, delay: number, repeat?: boolean);
    /**
     * The rate at which the events are sent in milliseconds.
     */
    get delay(): number;
    set delay(value: number);
    /**
     * Returns true if the timer is currently running.
     */
    get isRunning(): boolean;
    /**
     * If true the event will automatically repeat at an interval specified by the `delay`.
     */
    repeat: boolean;
    /**
     * Immediately sends an event.
     *
     * @remarks
     * The `createEvent` callback to construct the event is called but does not impact any pending
     * timeouts. Call `start` after calling `sendEvent` if you'd like to skip the next timer
     * interval.
     */
    sendEvent(): Promise<ILiveEvent<T>>;
    /**
     * Starts the timer.
     *
     * @remarks
     * If the timer is running it will be stooped and then re-started with a new `delay`.
     */
    start(): void;
    /**
     * Stops the timer if its running.
     */
    stop(): void;
    private delayedEmit;
}
//# sourceMappingURL=LiveEventTimer.d.ts.map