"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveEventSource = void 0;
/**
 * Broadcasts live share events to all clients and can be received by an `LiveEventTarget`.
 *
 * @remarks
 * Live objects won't typically create an `LiveEventSource` directly. They will, instead,
 * create an `LiveEventTarget` class, which can both send & receive events.
 * @template TEvent Type of event to broadcast.
 */
class LiveEventSource {
    /**
     * Creates a new `LiveEventSource` instance.
     * @param scope Scope to use for sending events.
     * @param eventName Name of the event to broadcast.
     */
    constructor(scope, eventName) {
        this._scope = scope;
        this._eventName = eventName;
    }
    /**
     * Broadcasts an event to any listening `LiveEventTarget` instances.
     * @param evt Optional. Partial event object to send. The `ILiveEvent.name`,
     * `ILiveEvent.timestamp`, and `ILiveEvent.clientId`
     * fields will be automatically populated prior to sending.
     * @returns The full event, including `ILiveEvent.name`,
     * `ILiveEvent.timestamp`, and `ILiveEvent.clientId` fields if known.
     */
    sendEvent(evt) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._scope.sendEvent(this._eventName, evt);
        });
    }
}
exports.LiveEventSource = LiveEventSource;
//# sourceMappingURL=LiveEventSource.js.map