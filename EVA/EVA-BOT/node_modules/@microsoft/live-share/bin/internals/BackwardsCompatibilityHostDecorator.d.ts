/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
import { ILiveShareHost, UserMeetingRole, IClientInfo } from "../interfaces";
import { BaseHostDecorator } from "./BaseHostDecorator";
/**
 * @hidden
 * Optionally Adds `retrySchedule` to `getClientInfo`. doesn't break `ILiveShareHost` interface.
 *
 * For internal use only. Will be deleted.
 */
export interface BackwardsCompatibilityGetClientInfoRetrySchedule {
    getClientInfo(clientId: string, lateFinish?: () => void, retrySchedule?: number[]): Promise<IClientInfo | undefined>;
}
/**
 * @hidden
 * Decorator that provides backwards compatibility for getClientInfo
 * If getClientInfo does not exist on an unsupported client, `IUserInfo.displayName` will be undefined
 *
 * For internal use only. Will be deleted.
 */
export declare class BackwardsCompatibilityHostDecorator extends BaseHostDecorator {
    readonly _host: ILiveShareHost & BackwardsCompatibilityGetClientInfoRetrySchedule;
    private readonly _userRolesRequestCache;
    private _totalTries;
    private _getClientInfoTriesRemaining;
    private _getClientInfoExists;
    private _hasWarnedPolyfill;
    /**
     * @hidden
     * _host would be `BackwardsCompatibilityHostDecorator` decorator: `new BackwardsCompatibilityHostDecorator(new LiveShareHostDecorator(teamsJsHost))`
     */
    constructor(_host: ILiveShareHost & BackwardsCompatibilityGetClientInfoRetrySchedule);
    /**
     * @deprecated
     */
    getClientRoles(clientId: string): Promise<UserMeetingRole[] | undefined>;
    getClientInfo(clientId: string): Promise<IClientInfo | undefined>;
    private warmupCheckGetClientInfoExists;
    private getRetrySchedule;
}
//# sourceMappingURL=BackwardsCompatibilityHostDecorator.d.ts.map