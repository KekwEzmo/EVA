"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatFixHostDecorator = void 0;
const BaseHostDecorator_1 = require("./BaseHostDecorator");
const type_guards_1 = require("./type-guards");
/**
 * @hidden
 * Temporary fix for android bug which causes IClientInfo to come back with the keys modified
 * Delete in November 2023
 */
class FormatFixHostDecorator extends BaseHostDecorator_1.BaseHostDecorator {
    getClientInfo(clientId) {
        return __awaiter(this, void 0, void 0, function* () {
            const clientInfo = yield this._host.getClientInfo(clientId);
            if ((0, type_guards_1.isIClientInfo)(clientId)) {
                return clientInfo;
            }
            const androidBugToClientInfo = androidBugFormatToClientInfo(clientInfo);
            if (androidBugToClientInfo) {
                return androidBugToClientInfo;
            }
            return clientInfo;
        });
    }
}
exports.FormatFixHostDecorator = FormatFixHostDecorator;
/**
 * @hidden
 */
function androidBugFormatToClientInfo(value) {
    if (value instanceof Object) {
        let userId;
        let roles;
        let displayName;
        Object.keys(value)
            .map((key) => value[key])
            .forEach((objectValue) => {
            if ((0, type_guards_1.isClientRolesResponse)(objectValue)) {
                roles = objectValue;
            }
            else if (isGuid(objectValue)) {
                userId = objectValue;
            }
            else if (typeof objectValue === "string") {
                displayName = objectValue;
            }
        });
        if (userId && roles) {
            return {
                userId,
                roles,
                displayName,
            };
        }
    }
    return undefined;
}
function isGuid(value) {
    if (typeof value === "string") {
        let regex = /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/;
        return regex.test(value);
    }
    return false;
}
//# sourceMappingURL=FormatFixHostDecorator.js.map