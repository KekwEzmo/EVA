"use strict";
/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Microsoft Live Share SDK License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleVerifier = void 0;
/**
 * @hidden
 */
class RoleVerifier {
    constructor(_host) {
        this._host = _host;
    }
    verifyRolesAllowed(clientId, allowedRoles) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!clientId) {
                throw new Error(`RoleVerifier: called verifyRolesAllowed() without a clientId`);
            }
            if (Array.isArray(allowedRoles) && allowedRoles.length > 0) {
                const info = yield this._host.getClientInfo(clientId);
                const roles = (_a = info === null || info === void 0 ? void 0 : info.roles) !== null && _a !== void 0 ? _a : [];
                for (let i = 0; i < allowedRoles.length; i++) {
                    const role = allowedRoles[i];
                    if (roles.indexOf(role) >= 0) {
                        return true;
                    }
                }
                return false;
            }
            return true;
        });
    }
}
exports.RoleVerifier = RoleVerifier;
//# sourceMappingURL=RoleVerifier.js.map